from math import gcd

# Encryption: C = (a * p + b) % 26
def encrypt(text, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("Invalid 'a': gcd(a, 26) must be 1 for one-to-one mapping.")
    return ''.join([chr((a * (ord(c) - 65) + b) % 26 + 65) if c.isalpha() else c for c in text.upper()])

# Modular inverse of a modulo 26
def modinv(a):
    for i in range(1, 26):
        if (a * i) % 26 == 1:
            return i
    raise ValueError("No modular inverse for given 'a'.")

# Decryption: P = a_inv * (C - b) % 26
def decrypt(cipher, a, b):
    a_inv = modinv(a)
    return ''.join([chr((a_inv * ((ord(c) - 65) - b)) % 26 + 65) if c.isalpha() else c for c in cipher.upper()])

# Example usage
a, b = 5, 8  # a must be coprime with 26
plain_text = "HELLO"
cipher_text = encrypt(plain_text, a, b)
decrypted_text = decrypt(cipher_text, a, b)

print("Plaintext:", plain_text)
print("Ciphertext:", cipher_text)
print("Decrypted:", decrypted_text)
